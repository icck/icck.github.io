<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My icck Blog</title>
    <link>https://icck.github.io/</link>
    <description>Recent content on My icck Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>js</language>
    <lastBuildDate>Mon, 02 Sep 2019 02:17:32 +0900</lastBuildDate>
    
	<atom:link href="https://icck.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>fishでaws-cliの補完機能を使う</title>
      <link>https://icck.github.io/posts/0006-fish-aws-cli/</link>
      <pubDate>Mon, 02 Sep 2019 02:17:32 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0006-fish-aws-cli/</guid>
      <description>bash -&amp;gt; fishに変更した場合、aws-cliの補完機能を有効にする方法 # 位置を特定します $ which aws_completer # 存在しない場合は作成します $ vim ~/.config/fish/config.fish # aws_completerのパスはwhichで調べたパスに適時変更しconfig.fishに追記して保存します $ complete -c aws -f -a &amp;#39;(begin; set -lx COMP_SHELL fish; set -lx COMP_LINE (commandline); /usr/local/bin/aws_completer; end)&amp;#39; #確認 $ aws s + tab さいごに これで、良いfish Lifeを過ごせます。</description>
    </item>
    
    <item>
      <title>Dynamodb TTL(Time to Live、データを自動削除する機能)を使ってみた</title>
      <link>https://icck.github.io/posts/0005-dynamodb-ttl/</link>
      <pubDate>Sun, 01 Sep 2019 09:17:57 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/0005-dynamodb-ttl/</guid>
      <description>TTLとは  レコード毎にデータの有効期限を指定でき、その有効期限を過ぎるとデータが自動削除される機能です  利用例  低アクセスデータをアーカイブTBLへ移動  メインTBLと同定義、キャパシティーだけ下げてOLDデータを保存  低アクセスデータを削除  削除時にトリガーして、LOGを残す  トリガーさせるにはStreamの有効化が必要  TTL詳細  TTL の有効化  カラムで指定した有効期限を過ぎると、自動でデータが消える 変更が完全に処理されるまでに最大で 1 時間かかる  TTL 属性  項目の TTL タイムスタンプを保存する DynamoDB 属性の名前  有効期限はNumber型のエポック時間(Unixtime（ミリ秒無し）)を指定  現在の時間を、項目の Time To Live 属性に保存されている時間と比較 属性に保存されているエポック時間の値が現在の時間よりも少ない場合、項目は期限切れとマークされ、その後に削除される  データは48時間以内に削除される  リアルタイム性が重要でない場合（48時間後に消えてもOKな場合）は、とても有効な機能  スループットは消費せず、データ容量が減らせる  エポック時間形式(Unixtime)  コンピューターシステム上での時刻表現の一種 UNIXエポック、すなわち協定世界時 (UTC) での1970年1月1日午前0時0分0秒から形式的な経過秒数（すなわち、実質的な経過秒数から、その間に挿入された閏秒を引き、削除された閏秒を加えたもの） 現在時刻からエポック時間を取得する方法  Linux ターミナル: date +%s Python: import time; long(time.time()) Java: System.currentTimeMillis() / 1000L JavaScript: Math.</description>
    </item>
    
    <item>
      <title>DynamoDBでSparse Indexesを利用するテクニック</title>
      <link>https://icck.github.io/posts/2019-08-31/</link>
      <pubDate>Sat, 31 Aug 2019 23:56:43 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-31/</guid>
      <description> Sparse Indexesとは  DynamoDBのデータ抽出アプローチのテクニックの１つ 特定Itemにしか設定していない項目にGSIを含めることでプライマリーキー、ソートキー以外のキーでデータ抽出を容易に 以下の悩みを解決（プライマリーキー、ソートキー以外のキーでデータ抽出）  scanだと高コスト、キーで検索しても高コスト、フィルターだとキー検索とコスト一緒   サンプル: gameから最優秀賞を取得 初期テーブル  game単位で最優秀スコアのデータを取得したい scoreの最優秀をawdという項目を用意。対象以外は項目を設定しない   awdを含めたグローバルセカンダリインデックスを作成 GSIを検索  最優秀賞が設定されている項目が少ないため、VIEWが出来た時点で絞り込まれている scanしても低コスト！←今回の一番のポイント  aws dynamodb scan --table-name game --index-name name-awd-index { &amp;#34;Count&amp;#34;: 1, &amp;#34;Items&amp;#34;: [ { &amp;#34;score&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;3&amp;#34; }, &amp;#34;id&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;user3&amp;#34; }, &amp;#34;awd&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;cp&amp;#34; }, &amp;#34;name&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;game1&amp;#34; } } ], &amp;#34;ScannedCount&amp;#34;: 1, &amp;#34;ConsumedCapacity&amp;#34;: null } </description>
    </item>
    
    <item>
      <title>DynamoDBをaws cliで操作する</title>
      <link>https://icck.github.io/posts/2019-08-29/</link>
      <pubDate>Thu, 29 Aug 2019 23:53:34 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-29/</guid>
      <description>Create Table (sample:mails) aws dynamodb create-table --table-name mails \ --attribute-definitions \  AttributeName=id,AttributeType=S \  AttributeName=Name,AttributeType=S \ --key-schema \  AttributeName=id,KeyType=HASH \  AttributeName=Name,KeyType=RANGE \ --provisioned-throughput \  ReadCapacityUnits=2,WriteCapacityUnits=2  attribute-definitions  プライマリーキーとソートキーを定義する それ以外のキーはテーブル作成時には定義しなくても良い  key-schema  HASH パーティションキー RANGE ソートキー  provisioned-throughput  ReadCapacityUnits 読み込みスループット WriteCapacityUnits 書き込みスループット   put-item aws dynamodb put-item \  --table-name mails \  --item &amp;#39;{&amp;#34;id&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;testid1&amp;#34;},&amp;#34;Name&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;Alice&amp;#34;},&amp;#34;mail&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;alice@test.mail&amp;#34;} }&amp;#39; \  --return-consumed-capacity TOTAL { &amp;#34;ConsumedCapacity&amp;#34;: { &amp;#34;CapacityUnits&amp;#34;: 1.</description>
    </item>
    
    <item>
      <title>Hugoに全文検索機能を追加する</title>
      <link>https://icck.github.io/posts/2019-08-28/</link>
      <pubDate>Wed, 28 Aug 2019 21:33:54 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-28/</guid>
      <description>完成したもの まずは動いているものは以下になります。
https://icck.github.io/search/
作業手順  手順を順に記載していきます。以下の記事を参考にさせていただきました。 http://rs.luminousspice.com/hugo-site-search/ https://snap.textgh.org/post/full-text-search-in-hugo/  インデックスファイルのテンプレート $ mkdir ./layouts/js $ touch ./layouts/js/single.html var data = [{{ range $index, $page := where .Site.Pages &amp;#34;Section&amp;#34; &amp;#34;posts&amp;#34;}} {{ if ne $index 0 }},{{ end }}{ url: &amp;#34;{{ $page.Permalink }}&amp;#34;, title: &amp;#34;{{ $page.Title }}&amp;#34;, content: &amp;#34;{{ .PlainWords }}&amp;#34; }{{ end }}]  インデックスファイルを生成する空の投稿 $ hugo new pages/indexjs.md --- date: 2019-08-28T21:50:35+09:00 type: &amp;#34;js&amp;#34; url: &amp;#34;index.js&amp;#34; --- 検索ページの作成 検索ページテンプレートの作成 $ mkdir .</description>
    </item>
    
    <item>
      <title>Hugoブログ更新方法</title>
      <link>https://icck.github.io/posts/000/</link>
      <pubDate>Mon, 26 Aug 2019 01:14:23 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/000/</guid>
      <description> Hugoの使い方を今後のブログ更新のために Hugoでブログを書いていく上で、運用方法をメモしていこうと思います。 インストール等は気が向いたときに
Local環境を起動 $ hugo server --theme=hugo-theme-nix --buildDrafts --watch 記事の作成 $ hugo new post/test.md --- title: &amp;#34;test&amp;#34; date: 2019-08-26T01:14:23+09:00 draft: true ---  title:記事のタイトルに修正 date:作成時刻のため、そのまま draft:trueが非公開。falseに変更し公開  Sample --- title: &amp;#34;test&amp;#34; date: 2019-08-26T01:14:23+09:00 draft: false --- ## ここにマークダウンで本文を記載 githubへpush ./deploy.sh </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://icck.github.io/about/</link>
      <pubDate>Wed, 28 Aug 2019 23:32:26 +0900</pubDate>
      
      <guid>https://icck.github.io/about/</guid>
      <description> 準備中 </description>
    </item>
    
    <item>
      <title>全文検索</title>
      <link>https://icck.github.io/search/</link>
      <pubDate>Wed, 28 Aug 2019 22:01:57 +0900</pubDate>
      
      <guid>https://icck.github.io/search/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://icck.github.io/index.js</link>
      <pubDate>Wed, 28 Aug 2019 21:50:35 +0900</pubDate>
      
      <guid>https://icck.github.io/index.js</guid>
      <description></description>
    </item>
    
  </channel>
</rss>