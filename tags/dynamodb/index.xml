<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DynamoDB on My icck Blog</title>
    <link>https://icck.github.io/tags/dynamodb/</link>
    <description>Recent content in DynamoDB on My icck Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>js</language>
    <lastBuildDate>Sat, 31 Aug 2019 23:56:43 +0900</lastBuildDate>
    
	<atom:link href="https://icck.github.io/tags/dynamodb/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DynamoDBでSpaseIndexを利用するサンプル</title>
      <link>https://icck.github.io/posts/2019-08-31/</link>
      <pubDate>Sat, 31 Aug 2019 23:56:43 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-31/</guid>
      <description> SpaseIndexとは  DynamoDBのデータ抽出アプローチのテクニックの１つ 特定Itemにしか設定していない項目にGSIを含めることでプライマリーキー、ソートキー以外のキーでデータ抽出を容易に 以下の悩みを解決（プライマリーキー、ソートキー以外のキーでデータ抽出）  scanだと高コスト、キーで検索しても高コスト、フィルターだとキー検索とコスト一緒   サンプル: gameから最優秀賞を取得 初期テーブル  game単位で最優秀スコアのデータを取得したい scoreの最優秀をawdという項目を用意。対象以外は項目を設定しない   awdを含めたグローバルセカンダリインデックスを作成 GSIを検索  最優秀賞が設定されている項目が少ないため、VIEWが出来た時点で絞り込まれている scanしても低コスト！←今回の一番のポイント  aws dynamodb scan --table-name game --index-name name-awd-index { &amp;#34;Count&amp;#34;: 1, &amp;#34;Items&amp;#34;: [ { &amp;#34;score&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;3&amp;#34; }, &amp;#34;id&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;user3&amp;#34; }, &amp;#34;awd&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;cp&amp;#34; }, &amp;#34;name&amp;#34;: { &amp;#34;S&amp;#34;: &amp;#34;game1&amp;#34; } } ], &amp;#34;ScannedCount&amp;#34;: 1, &amp;#34;ConsumedCapacity&amp;#34;: null } </description>
    </item>
    
    <item>
      <title>DynamoDBをaws cliで操作する</title>
      <link>https://icck.github.io/posts/2019-08-29/</link>
      <pubDate>Thu, 29 Aug 2019 23:53:34 +0900</pubDate>
      
      <guid>https://icck.github.io/posts/2019-08-29/</guid>
      <description>Create Table (sample:mails) aws dynamodb create-table --table-name mails \ --attribute-definitions \  AttributeName=id,AttributeType=S \  AttributeName=Name,AttributeType=S \ --key-schema \  AttributeName=id,KeyType=HASH \  AttributeName=Name,KeyType=RANGE \ --provisioned-throughput \  ReadCapacityUnits=2,WriteCapacityUnits=2  attribute-definitions  プライマリーキーとソートキーを定義する それ以外のキーはテーブル作成時には定義しなくても良い  key-schema  HASH パーティションキー RANGE ソートキー  provisioned-throughput  ReadCapacityUnits 読み込みスループット WriteCapacityUnits 書き込みスループット   put-item aws dynamodb put-item \  --table-name mails \  --item &amp;#39;{&amp;#34;id&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;testid1&amp;#34;},&amp;#34;Name&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;Alice&amp;#34;},&amp;#34;mail&amp;#34;: {&amp;#34;S&amp;#34;: &amp;#34;alice@test.mail&amp;#34;} }&amp;#39; \  --return-consumed-capacity TOTAL { &amp;#34;ConsumedCapacity&amp;#34;: { &amp;#34;CapacityUnits&amp;#34;: 1.</description>
    </item>
    
  </channel>
</rss>